object "plonk_verifier" {
    code {
        function allocate(size) -> ptr {
            ptr := mload(0x40)
            if eq(ptr, 0) { ptr := 0x60 }
            mstore(0x40, add(ptr, size))
        }
        let size := datasize("Runtime")
        let offset := allocate(size)
        datacopy(offset, dataoffset("Runtime"), size)
        return(offset, size)
    }
    object "Runtime" {
        code {
            let success:bool := true
            let f_p := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
            let f_q := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001
            function validate_ec_point(x, y) -> valid:bool {
                {
                    let x_lt_p:bool := lt(x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    let y_lt_p:bool := lt(y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    valid := and(x_lt_p, y_lt_p)
                }
                {
                    let y_square := mulmod(y, y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    let x_square := mulmod(x, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    let x_cube := mulmod(x_square, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    let x_cube_plus_3 := addmod(x_cube, 3, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                    let is_affine:bool := eq(x_cube_plus_3, y_square)
                    valid := and(valid, is_affine)
                }
            }

            mstore(0x20, mod(calldataload(0x0), f_q))
            mstore(0x0, 21727745031360609058825587453118227523720508596065641218312946982714335681769)

            {
                let x := calldataload(0x20)
                mstore(0x40, x)
                let y := calldataload(0x40)
                mstore(0x60, y)
                success := and(validate_ec_point(x, y), success)
            }

            {
                let x := calldataload(0x60)
                mstore(0x80, x)
                let y := calldataload(0x80)
                mstore(0xa0, y)
                success := and(validate_ec_point(x, y), success)
            }

            mstore(0xc0, keccak256(0x0, 192))

            {
                let hash := mload(0xc0)
                mstore(0xe0, mod(hash, f_q))
                mstore(0x100, hash)
            }

            mstore8(288, 1)
            mstore(0x120, keccak256(0x100, 33))

            {
                let hash := mload(0x120)
                mstore(0x140, mod(hash, f_q))
                mstore(0x160, hash)
            }

            mstore8(384, 1)
            mstore(0x180, keccak256(0x160, 33))

            {
                let hash := mload(0x180)
                mstore(0x1a0, mod(hash, f_q))
                mstore(0x1c0, hash)
            }

            {
                let x := calldataload(0xa0)
                mstore(0x1e0, x)
                let y := calldataload(0xc0)
                mstore(0x200, y)
                success := and(validate_ec_point(x, y), success)
            }

            {
                let x := calldataload(0xe0)
                mstore(0x220, x)
                let y := calldataload(0x100)
                mstore(0x240, y)
                success := and(validate_ec_point(x, y), success)
            }

            {
                let x := calldataload(0x120)
                mstore(0x260, x)
                let y := calldataload(0x140)
                mstore(0x280, y)
                success := and(validate_ec_point(x, y), success)
            }

            {
                let x := calldataload(0x160)
                mstore(0x2a0, x)
                let y := calldataload(0x180)
                mstore(0x2c0, y)
                success := and(validate_ec_point(x, y), success)
            }

            {
                let x := calldataload(0x1a0)
                mstore(0x2e0, x)
                let y := calldataload(0x1c0)
                mstore(0x300, y)
                success := and(validate_ec_point(x, y), success)
            }

            {
                let x := calldataload(0x1e0)
                mstore(0x320, x)
                let y := calldataload(0x200)
                mstore(0x340, y)
                success := and(validate_ec_point(x, y), success)
            }

            mstore(0x360, keccak256(0x1c0, 416))

            {
                let hash := mload(0x360)
                mstore(0x380, mod(hash, f_q))
                mstore(0x3a0, hash)
            }

            {
                let x := calldataload(0x220)
                mstore(0x3c0, x)
                let y := calldataload(0x240)
                mstore(0x3e0, y)
                success := and(validate_ec_point(x, y), success)
            }

            {
                let x := calldataload(0x260)
                mstore(0x400, x)
                let y := calldataload(0x280)
                mstore(0x420, y)
                success := and(validate_ec_point(x, y), success)
            }

            mstore(0x440, keccak256(0x3a0, 160))

            {
                let hash := mload(0x440)
                mstore(0x460, mod(hash, f_q))
                mstore(0x480, hash)
            }

            mstore(0x4a0, mod(calldataload(0x2a0), f_q))
            mstore(0x4c0, mod(calldataload(0x2c0), f_q))
            mstore(0x4e0, mod(calldataload(0x2e0), f_q))
            mstore(0x500, mod(calldataload(0x300), f_q))
            mstore(0x520, mod(calldataload(0x320), f_q))
            mstore(0x540, mod(calldataload(0x340), f_q))
            mstore(0x560, mod(calldataload(0x360), f_q))
            mstore(0x580, mod(calldataload(0x380), f_q))
            mstore(0x5a0, mod(calldataload(0x3a0), f_q))
            mstore(0x5c0, mod(calldataload(0x3c0), f_q))
            mstore(0x5e0, mod(calldataload(0x3e0), f_q))
            mstore(0x600, mod(calldataload(0x400), f_q))
            mstore(0x620, mod(calldataload(0x420), f_q))
            mstore(0x640, mod(calldataload(0x440), f_q))
            mstore(0x660, mod(calldataload(0x460), f_q))
            mstore(0x680, mod(calldataload(0x480), f_q))
            mstore(0x6a0, mod(calldataload(0x4a0), f_q))
            mstore(0x6c0, mod(calldataload(0x4c0), f_q))
            mstore(0x6e0, mod(calldataload(0x4e0), f_q))
            mstore(0x700, mod(calldataload(0x500), f_q))
            mstore(0x720, mod(calldataload(0x520), f_q))
            mstore(0x740, mod(calldataload(0x540), f_q))
            mstore(0x760, mod(calldataload(0x560), f_q))
            mstore(0x780, mod(calldataload(0x580), f_q))
            mstore(0x7a0, mod(calldataload(0x5a0), f_q))
            mstore(0x7c0, mod(calldataload(0x5c0), f_q))
            mstore(0x7e0, keccak256(0x480, 864))

            {
                let hash := mload(0x7e0)
                mstore(0x800, mod(hash, f_q))
                mstore(0x820, hash)
            }

            {
                let x := calldataload(0x5e0)
                mstore(0x840, x)
                let y := calldataload(0x600)
                mstore(0x860, y)
                success := and(validate_ec_point(x, y), success)
            }

            {
                let x := calldataload(0x620)
                mstore(0x880, x)
                let y := calldataload(0x640)
                mstore(0x8a0, y)
                success := and(validate_ec_point(x, y), success)
            }

            {
                let x := calldataload(0x660)
                mstore(0x8c0, x)
                let y := calldataload(0x680)
                mstore(0x8e0, y)
                success := and(validate_ec_point(x, y), success)
            }

            mstore(0x900, keccak256(0x820, 224))

            {
                let hash := mload(0x900)
                mstore(0x920, mod(hash, f_q))
                mstore(0x940, hash)
            }

            mstore(0x960, mulmod(mload(0x460), mload(0x460), f_q))
            mstore(0x980, mulmod(mload(0x960), mload(0x960), f_q))
            mstore(0x9a0, mulmod(mload(0x980), mload(0x980), f_q))
            mstore(0x9c0, mulmod(mload(0x9a0), mload(0x9a0), f_q))
            mstore(0x9e0, mulmod(mload(0x9c0), mload(0x9c0), f_q))
            mstore(0xa00, mulmod(mload(0x9e0), mload(0x9e0), f_q))
            mstore(0xa20, mulmod(mload(0xa00), mload(0xa00), f_q))
            mstore(0xa40, mulmod(mload(0xa20), mload(0xa20), f_q))
            mstore(0xa60, mulmod(mload(0xa40), mload(0xa40), f_q))
            mstore(0xa80, mulmod(mload(0xa60), mload(0xa60), f_q))
            mstore(0xaa0, mulmod(mload(0xa80), mload(0xa80), f_q))
            mstore(0xac0, mulmod(mload(0xaa0), mload(0xaa0), f_q))
            mstore(0xae0, mulmod(mload(0xac0), mload(0xac0), f_q))
            mstore(0xb00, mulmod(mload(0xae0), mload(0xae0), f_q))
            mstore(0xb20, addmod(mload(0xb00), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))
            mstore(0xb40, mulmod(mload(0xb20), 21886906919515554563358329182406612413066885618409173013477031200480436436993, f_q))
            mstore(0xb60, mulmod(mload(0xb40), 19994456137444606010007221842186606174874761508830279822119839964321394586494, f_q))
            mstore(0xb80, addmod(mload(0x460), 1893786734394669212239183903070668913673602891585754521578364222254413909123, f_q))
            mstore(0xba0, mulmod(mload(0xb40), 14501358620513184304688594014712925225467083093975292095517271010067522714961, f_q))
            mstore(0xbc0, addmod(mload(0x460), 7386884251326090917557811730544349863081281306440742248180933176508285780656, f_q))
            mstore(0xbe0, mulmod(mload(0xb40), 10679069158860809785885364198325818746230765378937472123583344754591056515264, f_q))
            mstore(0xc00, addmod(mload(0x460), 11209173712978465436361041546931456342317599021478562220114859431984751980353, f_q))
            mstore(0xc20, mulmod(mload(0xb40), 16352530144570232727633744131804667993120004373047725463318648550785966993151, f_q))
            mstore(0xc40, addmod(mload(0x460), 5535712727269042494612661613452607095428360027368308880379555635789841502466, f_q))
            mstore(0xc60, mulmod(mload(0xb40), 4521750382223097318870644937630448302689540805369738458837210702774549763045, f_q))
            mstore(0xc80, addmod(mload(0x460), 17366492489616177903375760807626826785858823595046295884860993483801258732572, f_q))
            mstore(0xca0, mulmod(mload(0xb40), 21534532313823515215512181691915269261875716777293450290797415136928563006845, f_q))
            mstore(0xcc0, addmod(mload(0x460), 353710558015760006734224053342005826672647623122584052900789049647245488772, f_q))
            mstore(0xce0, mulmod(mload(0xb40), 1, f_q))
            mstore(0xd00, addmod(mload(0x460), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))

            {
                let prod := mload(0xb80)
            
                prod := mulmod(mload(0xbc0), prod, f_q)
                mstore(0xd20, prod)
            
                prod := mulmod(mload(0xc00), prod, f_q)
                mstore(0xd40, prod)
            
                prod := mulmod(mload(0xc40), prod, f_q)
                mstore(0xd60, prod)
            
                prod := mulmod(mload(0xc80), prod, f_q)
                mstore(0xd80, prod)
            
                prod := mulmod(mload(0xcc0), prod, f_q)
                mstore(0xda0, prod)
            
                prod := mulmod(mload(0xd00), prod, f_q)
                mstore(0xdc0, prod)
            
                prod := mulmod(mload(0xb20), prod, f_q)
                mstore(0xde0, prod)
            }

            mstore(0xe20, 32)
            mstore(0xe40, 32)
            mstore(0xe60, 32)
            mstore(0xe80, mload(0xde0))
            mstore(0xea0, 21888242871839275222246405745257275088548364400416034343698204186575808495615)
            mstore(0xec0, 21888242871839275222246405745257275088548364400416034343698204186575808495617)
            success := and(eq(staticcall(gas(), 0x5, 0xe20, 0xc0, 0xe00, 0x20), 1), success)

            {
                let inv := mload(0xe00)
                let v

                v := mload(0xb20)
                mstore(2848, mulmod(mload(0xdc0), inv, f_q))
                inv := mulmod(v, inv, f_q)
            
                v := mload(0xd00)
                mstore(3328, mulmod(mload(0xda0), inv, f_q))
                inv := mulmod(v, inv, f_q)
            
                v := mload(0xcc0)
                mstore(3264, mulmod(mload(0xd80), inv, f_q))
                inv := mulmod(v, inv, f_q)
            
                v := mload(0xc80)
                mstore(3200, mulmod(mload(0xd60), inv, f_q))
                inv := mulmod(v, inv, f_q)
            
                v := mload(0xc40)
                mstore(3136, mulmod(mload(0xd40), inv, f_q))
                inv := mulmod(v, inv, f_q)
            
                v := mload(0xc00)
                mstore(3072, mulmod(mload(0xd20), inv, f_q))
                inv := mulmod(v, inv, f_q)
            
                v := mload(0xbc0)
                mstore(3008, mulmod(mload(0xb80), inv, f_q))
                inv := mulmod(v, inv, f_q)
                mstore(0xb80, inv)
            }

            mstore(0xee0, mulmod(mload(0xb60), mload(0xb80), f_q))
            mstore(0xf00, mulmod(mload(0xba0), mload(0xbc0), f_q))
            mstore(0xf20, mulmod(mload(0xbe0), mload(0xc00), f_q))
            mstore(0xf40, mulmod(mload(0xc20), mload(0xc40), f_q))
            mstore(0xf60, mulmod(mload(0xc60), mload(0xc80), f_q))
            mstore(0xf80, mulmod(mload(0xca0), mload(0xcc0), f_q))
            mstore(0xfa0, mulmod(mload(0xce0), mload(0xd00), f_q))

            {
                let result := mulmod(mload(0xfa0), mload(0x20), f_q)
                mstore(4032, result)
            }

            mstore(0xfe0, addmod(0, mload(0x4a0), f_q))
            mstore(0x1000, addmod(mload(0xfe0), mload(0x4c0), f_q))
            mstore(0x1020, addmod(mload(0x1000), mload(0x500), f_q))
            mstore(0x1040, addmod(mload(0x1020), mload(0x520), f_q))
            mstore(0x1060, addmod(mload(0x4e0), sub(f_q, mload(0x1040)), f_q))
            mstore(0x1080, mulmod(mload(0x1060), mload(0x540), f_q))
            mstore(0x10a0, mulmod(mload(0x380), mload(0x1080), f_q))
            mstore(0x10c0, addmod(1, sub(f_q, mload(0x620)), f_q))
            mstore(0x10e0, mulmod(mload(0x10c0), mload(0xfa0), f_q))
            mstore(0x1100, addmod(mload(0x10a0), mload(0x10e0), f_q))
            mstore(0x1120, mulmod(mload(0x380), mload(0x1100), f_q))
            mstore(0x1140, mulmod(mload(0x7a0), mload(0x7a0), f_q))
            mstore(0x1160, addmod(mload(0x1140), sub(f_q, mload(0x7a0)), f_q))
            mstore(0x1180, mulmod(mload(0x1160), mload(0xee0), f_q))
            mstore(0x11a0, addmod(mload(0x1120), mload(0x1180), f_q))
            mstore(0x11c0, mulmod(mload(0x380), mload(0x11a0), f_q))
            mstore(0x11e0, addmod(mload(0x680), sub(f_q, mload(0x660)), f_q))
            mstore(0x1200, mulmod(mload(0x11e0), mload(0xfa0), f_q))
            mstore(0x1220, addmod(mload(0x11c0), mload(0x1200), f_q))
            mstore(0x1240, mulmod(mload(0x380), mload(0x1220), f_q))
            mstore(0x1260, addmod(mload(0x6e0), sub(f_q, mload(0x6c0)), f_q))
            mstore(0x1280, mulmod(mload(0x1260), mload(0xfa0), f_q))
            mstore(0x12a0, addmod(mload(0x1240), mload(0x1280), f_q))
            mstore(0x12c0, mulmod(mload(0x380), mload(0x12a0), f_q))
            mstore(0x12e0, addmod(mload(0x740), sub(f_q, mload(0x720)), f_q))
            mstore(0x1300, mulmod(mload(0x12e0), mload(0xfa0), f_q))
            mstore(0x1320, addmod(mload(0x12c0), mload(0x1300), f_q))
            mstore(0x1340, mulmod(mload(0x380), mload(0x1320), f_q))
            mstore(0x1360, addmod(mload(0x7a0), sub(f_q, mload(0x780)), f_q))
            mstore(0x1380, mulmod(mload(0x1360), mload(0xfa0), f_q))
            mstore(0x13a0, addmod(mload(0x1340), mload(0x1380), f_q))
            mstore(0x13c0, mulmod(mload(0x380), mload(0x13a0), f_q))
            mstore(0x13e0, addmod(1, sub(f_q, mload(0xee0)), f_q))
            mstore(0x1400, addmod(mload(0xf00), mload(0xf20), f_q))
            mstore(0x1420, addmod(mload(0x1400), mload(0xf40), f_q))
            mstore(0x1440, addmod(mload(0x1420), mload(0xf60), f_q))
            mstore(0x1460, addmod(mload(0x1440), mload(0xf80), f_q))
            mstore(0x1480, addmod(mload(0x13e0), sub(f_q, mload(0x1460)), f_q))
            mstore(0x14a0, mulmod(mload(0x580), mload(0x140), f_q))
            mstore(0x14c0, addmod(mload(0x4a0), mload(0x14a0), f_q))
            mstore(0x14e0, addmod(mload(0x14c0), mload(0x1a0), f_q))
            mstore(0x1500, mulmod(mload(0x14e0), mload(0x640), f_q))
            mstore(0x1520, mulmod(1, mload(0x140), f_q))
            mstore(0x1540, mulmod(mload(0x460), mload(0x1520), f_q))
            mstore(0x1560, addmod(mload(0x4a0), mload(0x1540), f_q))
            mstore(0x1580, addmod(mload(0x1560), mload(0x1a0), f_q))
            mstore(0x15a0, mulmod(mload(0x1580), mload(0x620), f_q))
            mstore(0x15c0, addmod(mload(0x1500), sub(f_q, mload(0x15a0)), f_q))
            mstore(0x15e0, mulmod(mload(0x15c0), mload(0x1480), f_q))
            mstore(0x1600, addmod(mload(0x13c0), mload(0x15e0), f_q))
            mstore(0x1620, mulmod(mload(0x380), mload(0x1600), f_q))
            mstore(0x1640, mulmod(mload(0x5a0), mload(0x140), f_q))
            mstore(0x1660, addmod(mload(0x4c0), mload(0x1640), f_q))
            mstore(0x1680, addmod(mload(0x1660), mload(0x1a0), f_q))
            mstore(0x16a0, mulmod(mload(0x1680), mload(0x6a0), f_q))
            mstore(0x16c0, mulmod(4131629893567559867359510883348571134090853742863529169391034518566172092834, mload(0x140), f_q))
            mstore(0x16e0, mulmod(mload(0x460), mload(0x16c0), f_q))
            mstore(0x1700, addmod(mload(0x4c0), mload(0x16e0), f_q))
            mstore(0x1720, addmod(mload(0x1700), mload(0x1a0), f_q))
            mstore(0x1740, mulmod(mload(0x1720), mload(0x680), f_q))
            mstore(0x1760, addmod(mload(0x16a0), sub(f_q, mload(0x1740)), f_q))
            mstore(0x1780, mulmod(mload(0x1760), mload(0x1480), f_q))
            mstore(0x17a0, addmod(mload(0x1620), mload(0x1780), f_q))
            mstore(0x17c0, mulmod(mload(0x380), mload(0x17a0), f_q))
            mstore(0x17e0, mulmod(mload(0x5c0), mload(0x140), f_q))
            mstore(0x1800, addmod(mload(0x500), mload(0x17e0), f_q))
            mstore(0x1820, addmod(mload(0x1800), mload(0x1a0), f_q))
            mstore(0x1840, mulmod(mload(0x1820), mload(0x700), f_q))
            mstore(0x1860, mulmod(8910878055287538404433155982483128285667088683464058436815641868457422632747, mload(0x140), f_q))
            mstore(0x1880, mulmod(mload(0x460), mload(0x1860), f_q))
            mstore(0x18a0, addmod(mload(0x500), mload(0x1880), f_q))
            mstore(0x18c0, addmod(mload(0x18a0), mload(0x1a0), f_q))
            mstore(0x18e0, mulmod(mload(0x18c0), mload(0x6e0), f_q))
            mstore(0x1900, addmod(mload(0x1840), sub(f_q, mload(0x18e0)), f_q))
            mstore(0x1920, mulmod(mload(0x1900), mload(0x1480), f_q))
            mstore(0x1940, addmod(mload(0x17c0), mload(0x1920), f_q))
            mstore(0x1960, mulmod(mload(0x380), mload(0x1940), f_q))
            mstore(0x1980, mulmod(mload(0x5e0), mload(0x140), f_q))
            mstore(0x19a0, addmod(mload(0x520), mload(0x1980), f_q))
            mstore(0x19c0, addmod(mload(0x19a0), mload(0x1a0), f_q))
            mstore(0x19e0, mulmod(mload(0x19c0), mload(0x760), f_q))
            mstore(0x1a00, mulmod(11166246659983828508719468090013646171463329086121580628794302409516816350802, mload(0x140), f_q))
            mstore(0x1a20, mulmod(mload(0x460), mload(0x1a00), f_q))
            mstore(0x1a40, addmod(mload(0x520), mload(0x1a20), f_q))
            mstore(0x1a60, addmod(mload(0x1a40), mload(0x1a0), f_q))
            mstore(0x1a80, mulmod(mload(0x1a60), mload(0x740), f_q))
            mstore(0x1aa0, addmod(mload(0x19e0), sub(f_q, mload(0x1a80)), f_q))
            mstore(0x1ac0, mulmod(mload(0x1aa0), mload(0x1480), f_q))
            mstore(0x1ae0, addmod(mload(0x1960), mload(0x1ac0), f_q))
            mstore(0x1b00, mulmod(mload(0x380), mload(0x1ae0), f_q))
            mstore(0x1b20, mulmod(mload(0x600), mload(0x140), f_q))
            mstore(0x1b40, addmod(mload(0xfc0), mload(0x1b20), f_q))
            mstore(0x1b60, addmod(mload(0x1b40), mload(0x1a0), f_q))
            mstore(0x1b80, mulmod(mload(0x1b60), mload(0x7c0), f_q))
            mstore(0x1ba0, mulmod(284840088355319032285349970403338060113257071685626700086398481893096618818, mload(0x140), f_q))
            mstore(0x1bc0, mulmod(mload(0x460), mload(0x1ba0), f_q))
            mstore(0x1be0, addmod(mload(0xfc0), mload(0x1bc0), f_q))
            mstore(0x1c00, addmod(mload(0x1be0), mload(0x1a0), f_q))
            mstore(0x1c20, mulmod(mload(0x1c00), mload(0x7a0), f_q))
            mstore(0x1c40, addmod(mload(0x1b80), sub(f_q, mload(0x1c20)), f_q))
            mstore(0x1c60, mulmod(mload(0x1c40), mload(0x1480), f_q))
            mstore(0x1c80, addmod(mload(0x1b00), mload(0x1c60), f_q))
            mstore(0x1ca0, mulmod(mload(0xb00), mload(0xb00), f_q))
            mstore(0x1cc0, mulmod(1, mload(0xb00), f_q))
            mstore(0x1ce0, mulmod(mload(0x1c80), mload(0xb20), f_q))
            mstore(0x1d00, mulmod(mload(0x920), mload(0x920), f_q))
            mstore(0x1d20, mulmod(mload(0x1d00), mload(0x920), f_q))
            mstore(0x1d40, mulmod(mload(0x800), mload(0x800), f_q))
            mstore(0x1d60, mulmod(mload(0x1d40), mload(0x800), f_q))
            mstore(0x1d80, mulmod(mload(0x1d60), mload(0x800), f_q))
            mstore(0x1da0, mulmod(mload(0x1d80), mload(0x800), f_q))
            mstore(0x1dc0, mulmod(mload(0x1da0), mload(0x800), f_q))
            mstore(0x1de0, mulmod(mload(0x1dc0), mload(0x800), f_q))
            mstore(0x1e00, mulmod(mload(0x1de0), mload(0x800), f_q))
            mstore(0x1e20, mulmod(mload(0x1e00), mload(0x800), f_q))
            mstore(0x1e40, mulmod(mload(0x1e20), mload(0x800), f_q))
            mstore(0x1e60, mulmod(mload(0x1e40), mload(0x800), f_q))
            mstore(0x1e80, mulmod(mload(0x1e60), mload(0x800), f_q))
            mstore(0x1ea0, mulmod(mload(0x1e80), mload(0x800), f_q))
            mstore(0x1ec0, mulmod(mload(0x1ea0), mload(0x800), f_q))
            mstore(0x1ee0, mulmod(mload(0x1ec0), mload(0x800), f_q))
            mstore(0x1f00, mulmod(mload(0x1ee0), mload(0x800), f_q))
            mstore(0x1f20, mulmod(mload(0x1f00), mload(0x800), f_q))
            mstore(0x1f40, mulmod(sub(f_q, mload(0x4a0)), 1, f_q))
            mstore(0x1f60, mulmod(sub(f_q, mload(0x4c0)), mload(0x800), f_q))
            mstore(0x1f80, mulmod(1, mload(0x800), f_q))
            mstore(0x1fa0, addmod(mload(0x1f40), mload(0x1f60), f_q))
            mstore(0x1fc0, mulmod(sub(f_q, mload(0x620)), mload(0x1d40), f_q))
            mstore(0x1fe0, mulmod(1, mload(0x1d40), f_q))
            mstore(0x2000, addmod(mload(0x1fa0), mload(0x1fc0), f_q))
            mstore(0x2020, mulmod(sub(f_q, mload(0x680)), mload(0x1d60), f_q))
            mstore(0x2040, mulmod(1, mload(0x1d60), f_q))
            mstore(0x2060, addmod(mload(0x2000), mload(0x2020), f_q))
            mstore(0x2080, mulmod(sub(f_q, mload(0x6e0)), mload(0x1d80), f_q))
            mstore(0x20a0, mulmod(1, mload(0x1d80), f_q))
            mstore(0x20c0, addmod(mload(0x2060), mload(0x2080), f_q))
            mstore(0x20e0, mulmod(sub(f_q, mload(0x740)), mload(0x1da0), f_q))
            mstore(0x2100, mulmod(1, mload(0x1da0), f_q))
            mstore(0x2120, addmod(mload(0x20c0), mload(0x20e0), f_q))
            mstore(0x2140, mulmod(sub(f_q, mload(0x7a0)), mload(0x1dc0), f_q))
            mstore(0x2160, mulmod(1, mload(0x1dc0), f_q))
            mstore(0x2180, addmod(mload(0x2120), mload(0x2140), f_q))
            mstore(0x21a0, mulmod(sub(f_q, mload(0x500)), mload(0x1de0), f_q))
            mstore(0x21c0, mulmod(1, mload(0x1de0), f_q))
            mstore(0x21e0, addmod(mload(0x2180), mload(0x21a0), f_q))
            mstore(0x2200, mulmod(sub(f_q, mload(0x520)), mload(0x1e00), f_q))
            mstore(0x2220, mulmod(1, mload(0x1e00), f_q))
            mstore(0x2240, addmod(mload(0x21e0), mload(0x2200), f_q))
            mstore(0x2260, addmod(mload(0x21c0), mload(0x2220), f_q))
            mstore(0x2280, mulmod(sub(f_q, mload(0x540)), mload(0x1e20), f_q))
            mstore(0x22a0, mulmod(1, mload(0x1e20), f_q))
            mstore(0x22c0, addmod(mload(0x2240), mload(0x2280), f_q))
            mstore(0x22e0, addmod(mload(0x2260), mload(0x22a0), f_q))
            mstore(0x2300, mulmod(sub(f_q, mload(0x580)), mload(0x1e40), f_q))
            mstore(0x2320, mulmod(1, mload(0x1e40), f_q))
            mstore(0x2340, addmod(mload(0x22c0), mload(0x2300), f_q))
            mstore(0x2360, mulmod(sub(f_q, mload(0x5a0)), mload(0x1e60), f_q))
            mstore(0x2380, mulmod(1, mload(0x1e60), f_q))
            mstore(0x23a0, addmod(mload(0x2340), mload(0x2360), f_q))
            mstore(0x23c0, mulmod(sub(f_q, mload(0x5c0)), mload(0x1e80), f_q))
            mstore(0x23e0, mulmod(1, mload(0x1e80), f_q))
            mstore(0x2400, addmod(mload(0x23a0), mload(0x23c0), f_q))
            mstore(0x2420, mulmod(sub(f_q, mload(0x5e0)), mload(0x1ea0), f_q))
            mstore(0x2440, mulmod(1, mload(0x1ea0), f_q))
            mstore(0x2460, addmod(mload(0x2400), mload(0x2420), f_q))
            mstore(0x2480, mulmod(sub(f_q, mload(0x600)), mload(0x1ec0), f_q))
            mstore(0x24a0, mulmod(1, mload(0x1ec0), f_q))
            mstore(0x24c0, addmod(mload(0x2460), mload(0x2480), f_q))
            mstore(0x24e0, mulmod(sub(f_q, mload(0x1ce0)), mload(0x1ee0), f_q))
            mstore(0x2500, mulmod(1, mload(0x1ee0), f_q))
            mstore(0x2520, mulmod(mload(0x1cc0), mload(0x1ee0), f_q))
            mstore(0x2540, addmod(mload(0x24c0), mload(0x24e0), f_q))
            mstore(0x2560, mulmod(sub(f_q, mload(0x560)), mload(0x1f00), f_q))
            mstore(0x2580, mulmod(1, mload(0x1f00), f_q))
            mstore(0x25a0, addmod(mload(0x2540), mload(0x2560), f_q))
            mstore(0x25c0, mulmod(mload(0x25a0), 1, f_q))
            mstore(0x25e0, mulmod(mload(0x1f80), 1, f_q))
            mstore(0x2600, mulmod(mload(0x1fe0), 1, f_q))
            mstore(0x2620, mulmod(mload(0x2040), 1, f_q))
            mstore(0x2640, mulmod(mload(0x20a0), 1, f_q))
            mstore(0x2660, mulmod(mload(0x2100), 1, f_q))
            mstore(0x2680, mulmod(mload(0x2160), 1, f_q))
            mstore(0x26a0, mulmod(mload(0x22e0), 1, f_q))
            mstore(0x26c0, mulmod(mload(0x2320), 1, f_q))
            mstore(0x26e0, mulmod(mload(0x2380), 1, f_q))
            mstore(0x2700, mulmod(mload(0x23e0), 1, f_q))
            mstore(0x2720, mulmod(mload(0x2440), 1, f_q))
            mstore(0x2740, mulmod(mload(0x24a0), 1, f_q))
            mstore(0x2760, mulmod(mload(0x2500), 1, f_q))
            mstore(0x2780, mulmod(mload(0x2520), 1, f_q))
            mstore(0x27a0, mulmod(mload(0x2580), 1, f_q))
            mstore(0x27c0, mulmod(sub(f_q, mload(0x4e0)), 1, f_q))
            mstore(0x27e0, mulmod(sub(f_q, mload(0x640)), mload(0x800), f_q))
            mstore(0x2800, addmod(mload(0x27c0), mload(0x27e0), f_q))
            mstore(0x2820, mulmod(sub(f_q, mload(0x6a0)), mload(0x1d40), f_q))
            mstore(0x2840, addmod(mload(0x2800), mload(0x2820), f_q))
            mstore(0x2860, mulmod(sub(f_q, mload(0x700)), mload(0x1d60), f_q))
            mstore(0x2880, addmod(mload(0x2840), mload(0x2860), f_q))
            mstore(0x28a0, mulmod(sub(f_q, mload(0x760)), mload(0x1d80), f_q))
            mstore(0x28c0, addmod(mload(0x2880), mload(0x28a0), f_q))
            mstore(0x28e0, mulmod(sub(f_q, mload(0x7c0)), mload(0x1da0), f_q))
            mstore(0x2900, addmod(mload(0x28c0), mload(0x28e0), f_q))
            mstore(0x2920, mulmod(mload(0x2900), mload(0x920), f_q))
            mstore(0x2940, mulmod(1, mload(0x920), f_q))
            mstore(0x2960, mulmod(mload(0x1f80), mload(0x920), f_q))
            mstore(0x2980, mulmod(mload(0x1fe0), mload(0x920), f_q))
            mstore(0x29a0, mulmod(mload(0x2040), mload(0x920), f_q))
            mstore(0x29c0, mulmod(mload(0x20a0), mload(0x920), f_q))
            mstore(0x29e0, mulmod(mload(0x2100), mload(0x920), f_q))
            mstore(0x2a00, addmod(mload(0x25c0), mload(0x2920), f_q))
            mstore(0x2a20, addmod(1, mload(0x2940), f_q))
            mstore(0x2a40, addmod(mload(0x2600), mload(0x2960), f_q))
            mstore(0x2a60, addmod(mload(0x2620), mload(0x2980), f_q))
            mstore(0x2a80, addmod(mload(0x2640), mload(0x29a0), f_q))
            mstore(0x2aa0, addmod(mload(0x2660), mload(0x29c0), f_q))
            mstore(0x2ac0, addmod(mload(0x2680), mload(0x29e0), f_q))
            mstore(0x2ae0, mulmod(sub(f_q, mload(0x780)), 1, f_q))
            mstore(0x2b00, mulmod(sub(f_q, mload(0x720)), mload(0x800), f_q))
            mstore(0x2b20, addmod(mload(0x2ae0), mload(0x2b00), f_q))
            mstore(0x2b40, mulmod(sub(f_q, mload(0x6c0)), mload(0x1d40), f_q))
            mstore(0x2b60, addmod(mload(0x2b20), mload(0x2b40), f_q))
            mstore(0x2b80, mulmod(sub(f_q, mload(0x660)), mload(0x1d60), f_q))
            mstore(0x2ba0, addmod(mload(0x2b60), mload(0x2b80), f_q))
            mstore(0x2bc0, mulmod(mload(0x2ba0), mload(0x1d00), f_q))
            mstore(0x2be0, mulmod(1, mload(0x1d00), f_q))
            mstore(0x2c00, mulmod(mload(0x1f80), mload(0x1d00), f_q))
            mstore(0x2c20, mulmod(mload(0x1fe0), mload(0x1d00), f_q))
            mstore(0x2c40, mulmod(mload(0x2040), mload(0x1d00), f_q))
            mstore(0x2c60, addmod(mload(0x2a00), mload(0x2bc0), f_q))
            mstore(0x2c80, addmod(mload(0x2aa0), mload(0x2be0), f_q))
            mstore(0x2ca0, addmod(mload(0x2a80), mload(0x2c00), f_q))
            mstore(0x2cc0, addmod(mload(0x2a60), mload(0x2c20), f_q))
            mstore(0x2ce0, addmod(mload(0x2a40), mload(0x2c40), f_q))
            mstore(0x2d00, mulmod(1, mload(0x460), f_q))
            mstore(0x2d20, mulmod(1, mload(0x2d00), f_q))
            mstore(0x2d40, mulmod(15929319040748925786993503352261583814540822795415523916919259682053529746604, mload(0x460), f_q))
            mstore(0x2d60, mulmod(mload(0x2940), mload(0x2d40), f_q))
            mstore(0x2d80, mulmod(19994456137444606010007221842186606174874761508830279822119839964321394586494, mload(0x460), f_q))
            mstore(0x2da0, mulmod(mload(0x2be0), mload(0x2d80), f_q))
            mstore(0x2dc0, 0x0000000000000000000000000000000000000000000000000000000000000001)
            mstore(0x2de0, 0x0000000000000000000000000000000000000000000000000000000000000002)
            mstore(0x2e00, mload(0x2c60))
            success := and(eq(staticcall(gas(), 0x7, 0x2dc0, 0x60, 0x2dc0, 0x40), 1), success)
            mstore(0x2e20, mload(0x40))
            mstore(0x2e40, mload(0x60))
            mstore(0x2e60, mload(0x2a20))
            success := and(eq(staticcall(gas(), 0x7, 0x2e20, 0x60, 0x2e20, 0x40), 1), success)
            mstore(0x2e80, mload(0x2dc0))
            mstore(0x2ea0, mload(0x2de0))
            mstore(0x2ec0, mload(0x2e20))
            mstore(0x2ee0, mload(0x2e40))
            success := and(eq(staticcall(gas(), 0x6, 0x2e80, 0x80, 0x2e80, 0x40), 1), success)
            mstore(0x2f00, mload(0x80))
            mstore(0x2f20, mload(0xa0))
            mstore(0x2f40, mload(0x25e0))
            success := and(eq(staticcall(gas(), 0x7, 0x2f00, 0x60, 0x2f00, 0x40), 1), success)
            mstore(0x2f60, mload(0x2e80))
            mstore(0x2f80, mload(0x2ea0))
            mstore(0x2fa0, mload(0x2f00))
            mstore(0x2fc0, mload(0x2f20))
            success := and(eq(staticcall(gas(), 0x6, 0x2f60, 0x80, 0x2f60, 0x40), 1), success)
            mstore(0x2fe0, mload(0x1e0))
            mstore(0x3000, mload(0x200))
            mstore(0x3020, mload(0x2ce0))
            success := and(eq(staticcall(gas(), 0x7, 0x2fe0, 0x60, 0x2fe0, 0x40), 1), success)
            mstore(0x3040, mload(0x2f60))
            mstore(0x3060, mload(0x2f80))
            mstore(0x3080, mload(0x2fe0))
            mstore(0x30a0, mload(0x3000))
            success := and(eq(staticcall(gas(), 0x6, 0x3040, 0x80, 0x3040, 0x40), 1), success)
            mstore(0x30c0, mload(0x220))
            mstore(0x30e0, mload(0x240))
            mstore(0x3100, mload(0x2cc0))
            success := and(eq(staticcall(gas(), 0x7, 0x30c0, 0x60, 0x30c0, 0x40), 1), success)
            mstore(0x3120, mload(0x3040))
            mstore(0x3140, mload(0x3060))
            mstore(0x3160, mload(0x30c0))
            mstore(0x3180, mload(0x30e0))
            success := and(eq(staticcall(gas(), 0x6, 0x3120, 0x80, 0x3120, 0x40), 1), success)
            mstore(0x31a0, mload(0x260))
            mstore(0x31c0, mload(0x280))
            mstore(0x31e0, mload(0x2ca0))
            success := and(eq(staticcall(gas(), 0x7, 0x31a0, 0x60, 0x31a0, 0x40), 1), success)
            mstore(0x3200, mload(0x3120))
            mstore(0x3220, mload(0x3140))
            mstore(0x3240, mload(0x31a0))
            mstore(0x3260, mload(0x31c0))
            success := and(eq(staticcall(gas(), 0x6, 0x3200, 0x80, 0x3200, 0x40), 1), success)
            mstore(0x3280, mload(0x2a0))
            mstore(0x32a0, mload(0x2c0))
            mstore(0x32c0, mload(0x2c80))
            success := and(eq(staticcall(gas(), 0x7, 0x3280, 0x60, 0x3280, 0x40), 1), success)
            mstore(0x32e0, mload(0x3200))
            mstore(0x3300, mload(0x3220))
            mstore(0x3320, mload(0x3280))
            mstore(0x3340, mload(0x32a0))
            success := and(eq(staticcall(gas(), 0x6, 0x32e0, 0x80, 0x32e0, 0x40), 1), success)
            mstore(0x3360, mload(0x2e0))
            mstore(0x3380, mload(0x300))
            mstore(0x33a0, mload(0x2ac0))
            success := and(eq(staticcall(gas(), 0x7, 0x3360, 0x60, 0x3360, 0x40), 1), success)
            mstore(0x33c0, mload(0x32e0))
            mstore(0x33e0, mload(0x3300))
            mstore(0x3400, mload(0x3360))
            mstore(0x3420, mload(0x3380))
            success := and(eq(staticcall(gas(), 0x6, 0x33c0, 0x80, 0x33c0, 0x40), 1), success)
            mstore(0x3440, 0x1e47100a0d96343afc095e5a635338fed517c4f1790bea3834642ccc93897f53)
            mstore(0x3460, 0x202452ad70418f80b6212178472c31752e4002bd1a8797c241dc105f0a37176d)
            mstore(0x3480, mload(0x26a0))
            success := and(eq(staticcall(gas(), 0x7, 0x3440, 0x60, 0x3440, 0x40), 1), success)
            mstore(0x34a0, mload(0x33c0))
            mstore(0x34c0, mload(0x33e0))
            mstore(0x34e0, mload(0x3440))
            mstore(0x3500, mload(0x3460))
            success := and(eq(staticcall(gas(), 0x6, 0x34a0, 0x80, 0x34a0, 0x40), 1), success)
            mstore(0x3520, 0x07c56bd9ab3d51b3d8198b40064632136235cceddfb790bd0aa58e0d9ffcd579)
            mstore(0x3540, 0x0b216cdf0e07a8c63e647f041cb3e84e6c5d47ba55e14daf53df1cb012103509)
            mstore(0x3560, mload(0x26c0))
            success := and(eq(staticcall(gas(), 0x7, 0x3520, 0x60, 0x3520, 0x40), 1), success)
            mstore(0x3580, mload(0x34a0))
            mstore(0x35a0, mload(0x34c0))
            mstore(0x35c0, mload(0x3520))
            mstore(0x35e0, mload(0x3540))
            success := and(eq(staticcall(gas(), 0x6, 0x3580, 0x80, 0x3580, 0x40), 1), success)
            mstore(0x3600, 0x13d5cc4fe597809538a15ec435485a1031ef5431a29c1b5af8781d78c5b5ebfa)
            mstore(0x3620, 0x0bbba45e63a639f656fd0c1f5b926dc9d7db7cbc033c9fe8a84cae10353df876)
            mstore(0x3640, mload(0x26e0))
            success := and(eq(staticcall(gas(), 0x7, 0x3600, 0x60, 0x3600, 0x40), 1), success)
            mstore(0x3660, mload(0x3580))
            mstore(0x3680, mload(0x35a0))
            mstore(0x36a0, mload(0x3600))
            mstore(0x36c0, mload(0x3620))
            success := and(eq(staticcall(gas(), 0x6, 0x3660, 0x80, 0x3660, 0x40), 1), success)
            mstore(0x36e0, 0x2e7114271b38e339228e753d8f3d84ffdd9e768cb18c77c59feffd844eca1ece)
            mstore(0x3700, 0x2468c4ad05f3d1f2b1d9b6bbcbd019df5001504db50dc653bdfd2f9d4eeb575d)
            mstore(0x3720, mload(0x2700))
            success := and(eq(staticcall(gas(), 0x7, 0x36e0, 0x60, 0x36e0, 0x40), 1), success)
            mstore(0x3740, mload(0x3660))
            mstore(0x3760, mload(0x3680))
            mstore(0x3780, mload(0x36e0))
            mstore(0x37a0, mload(0x3700))
            success := and(eq(staticcall(gas(), 0x6, 0x3740, 0x80, 0x3740, 0x40), 1), success)
            mstore(0x37c0, 0x149bb97491457482072d3cd13c9d9b772da2cebea6bc4c9825c228010695d48f)
            mstore(0x37e0, 0x28c77e67ef264ff5ce9768979fa2f7ca10a2e4eb9471f7f4d51459930f5d5240)
            mstore(0x3800, mload(0x2720))
            success := and(eq(staticcall(gas(), 0x7, 0x37c0, 0x60, 0x37c0, 0x40), 1), success)
            mstore(0x3820, mload(0x3740))
            mstore(0x3840, mload(0x3760))
            mstore(0x3860, mload(0x37c0))
            mstore(0x3880, mload(0x37e0))
            success := and(eq(staticcall(gas(), 0x6, 0x3820, 0x80, 0x3820, 0x40), 1), success)
            mstore(0x38a0, 0x25cab12abecc3c0359f0a7a6e10fb09287b2a4d6a405d3311106c3c43842d4b3)
            mstore(0x38c0, 0x289bc89f12715a1d3d05ce0e320dba4c52184e916b99d8d21d7f8ffed9042713)
            mstore(0x38e0, mload(0x2740))
            success := and(eq(staticcall(gas(), 0x7, 0x38a0, 0x60, 0x38a0, 0x40), 1), success)
            mstore(0x3900, mload(0x3820))
            mstore(0x3920, mload(0x3840))
            mstore(0x3940, mload(0x38a0))
            mstore(0x3960, mload(0x38c0))
            success := and(eq(staticcall(gas(), 0x6, 0x3900, 0x80, 0x3900, 0x40), 1), success)
            mstore(0x3980, mload(0x3c0))
            mstore(0x39a0, mload(0x3e0))
            mstore(0x39c0, mload(0x2760))
            success := and(eq(staticcall(gas(), 0x7, 0x3980, 0x60, 0x3980, 0x40), 1), success)
            mstore(0x39e0, mload(0x3900))
            mstore(0x3a00, mload(0x3920))
            mstore(0x3a20, mload(0x3980))
            mstore(0x3a40, mload(0x39a0))
            success := and(eq(staticcall(gas(), 0x6, 0x39e0, 0x80, 0x39e0, 0x40), 1), success)
            mstore(0x3a60, mload(0x400))
            mstore(0x3a80, mload(0x420))
            mstore(0x3aa0, mload(0x2780))
            success := and(eq(staticcall(gas(), 0x7, 0x3a60, 0x60, 0x3a60, 0x40), 1), success)
            mstore(0x3ac0, mload(0x39e0))
            mstore(0x3ae0, mload(0x3a00))
            mstore(0x3b00, mload(0x3a60))
            mstore(0x3b20, mload(0x3a80))
            success := and(eq(staticcall(gas(), 0x6, 0x3ac0, 0x80, 0x3ac0, 0x40), 1), success)
            mstore(0x3b40, mload(0x320))
            mstore(0x3b60, mload(0x340))
            mstore(0x3b80, mload(0x27a0))
            success := and(eq(staticcall(gas(), 0x7, 0x3b40, 0x60, 0x3b40, 0x40), 1), success)
            mstore(0x3ba0, mload(0x3ac0))
            mstore(0x3bc0, mload(0x3ae0))
            mstore(0x3be0, mload(0x3b40))
            mstore(0x3c00, mload(0x3b60))
            success := and(eq(staticcall(gas(), 0x6, 0x3ba0, 0x80, 0x3ba0, 0x40), 1), success)
            mstore(0x3c20, mload(0x840))
            mstore(0x3c40, mload(0x860))
            mstore(0x3c60, mload(0x2d20))
            success := and(eq(staticcall(gas(), 0x7, 0x3c20, 0x60, 0x3c20, 0x40), 1), success)
            mstore(0x3c80, mload(0x3ba0))
            mstore(0x3ca0, mload(0x3bc0))
            mstore(0x3cc0, mload(0x3c20))
            mstore(0x3ce0, mload(0x3c40))
            success := and(eq(staticcall(gas(), 0x6, 0x3c80, 0x80, 0x3c80, 0x40), 1), success)
            mstore(0x3d00, mload(0x880))
            mstore(0x3d20, mload(0x8a0))
            mstore(0x3d40, mload(0x2d60))
            success := and(eq(staticcall(gas(), 0x7, 0x3d00, 0x60, 0x3d00, 0x40), 1), success)
            mstore(0x3d60, mload(0x3c80))
            mstore(0x3d80, mload(0x3ca0))
            mstore(0x3da0, mload(0x3d00))
            mstore(0x3dc0, mload(0x3d20))
            success := and(eq(staticcall(gas(), 0x6, 0x3d60, 0x80, 0x3d60, 0x40), 1), success)
            mstore(0x3de0, mload(0x8c0))
            mstore(0x3e00, mload(0x8e0))
            mstore(0x3e20, mload(0x2da0))
            success := and(eq(staticcall(gas(), 0x7, 0x3de0, 0x60, 0x3de0, 0x40), 1), success)
            mstore(0x3e40, mload(0x3d60))
            mstore(0x3e60, mload(0x3d80))
            mstore(0x3e80, mload(0x3de0))
            mstore(0x3ea0, mload(0x3e00))
            success := and(eq(staticcall(gas(), 0x6, 0x3e40, 0x80, 0x3e40, 0x40), 1), success)
            mstore(0x3ec0, mload(0x880))
            mstore(0x3ee0, mload(0x8a0))
            mstore(0x3f00, mload(0x2940))
            success := and(eq(staticcall(gas(), 0x7, 0x3ec0, 0x60, 0x3ec0, 0x40), 1), success)
            mstore(0x3f20, mload(0x840))
            mstore(0x3f40, mload(0x860))
            mstore(0x3f60, mload(0x3ec0))
            mstore(0x3f80, mload(0x3ee0))
            success := and(eq(staticcall(gas(), 0x6, 0x3f20, 0x80, 0x3f20, 0x40), 1), success)
            mstore(0x3fa0, mload(0x8c0))
            mstore(0x3fc0, mload(0x8e0))
            mstore(0x3fe0, mload(0x2be0))
            success := and(eq(staticcall(gas(), 0x7, 0x3fa0, 0x60, 0x3fa0, 0x40), 1), success)
            mstore(0x4000, mload(0x3f20))
            mstore(0x4020, mload(0x3f40))
            mstore(0x4040, mload(0x3fa0))
            mstore(0x4060, mload(0x3fc0))
            success := and(eq(staticcall(gas(), 0x6, 0x4000, 0x80, 0x4000, 0x40), 1), success)
            mstore(0x4080, mload(0x3e40))
            mstore(0x40a0, mload(0x3e60))
            mstore(0x40c0, 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2)
            mstore(0x40e0, 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)
            mstore(0x4100, 0x090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b)
            mstore(0x4120, 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)
            mstore(0x4140, mload(0x4000))
            mstore(0x4160, mload(0x4020))
            mstore(0x4180, 0x0532d9750afb45e51e77cf2a37fbc3441e7aa8b95f4ae5e97b121c5fc6e7e8e3)
            mstore(0x41a0, 0x2591facacaca245e85c02f03f4f6e02279604d94255119fb84ea5e1df5403778)
            mstore(0x41c0, 0x1e63cd5271efef1492f22fe17065f6df44b8a342b2f93faa03e16426e3d87c6b)
            mstore(0x41e0, 0x28081b32f41ddfdfe96d6cfb10f1dc29813f8ce16673dbe1675494e690793b8f)
            success := and(eq(staticcall(gas(), 0x8, 0x4080, 0x180, 0x4080, 0x20), 1), success)
            success := and(eq(mload(0x4080), 1), success)

            if not(success) { revert(0, 0) }
            return(0, 0)
        }
    }
}