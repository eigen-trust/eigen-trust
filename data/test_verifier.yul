
        object "plonk_verifier" {
            code {
                function allocate(size) -> ptr {
                    ptr := mload(0x40)
                    if eq(ptr, 0) { ptr := 0x60 }
                    mstore(0x40, add(ptr, size))
                }
                let size := datasize("Runtime")
                let offset := allocate(size)
                datacopy(offset, dataoffset("Runtime"), size)
                return(offset, size)
            }
            object "Runtime" {
                code {
                    let success:bool := true
                    let f_p := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47
                    let f_q := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001
                    function validate_ec_point(x, y) -> valid:bool {
                        {
                            let x_lt_p:bool := lt(x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                            let y_lt_p:bool := lt(y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                            valid := and(x_lt_p, y_lt_p)
                        }
                        {
                            let y_square := mulmod(y, y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                            let x_square := mulmod(x, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                            let x_cube := mulmod(x_square, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                            let x_cube_plus_3 := addmod(x_cube, 3, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)
                            let is_affine:bool := eq(x_cube_plus_3, y_square)
                            valid := and(valid, is_affine)
                        }
                    }
                    mstore(0x20, mod(calldataload(0x0), f_q))
mstore(0x0, 14624500923948812997581988552190912675012624702572154658184695055837214194138)

        {
            let x := calldataload(0x20)
            mstore(0x40, x)
            let y := calldataload(0x40)
            mstore(0x60, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x60)
            mstore(0x80, x)
            let y := calldataload(0x80)
            mstore(0xa0, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0xc0, keccak256(0x0, 192))
{
            let hash := mload(0xc0)
            mstore(0xe0, mod(hash, f_q))
            mstore(0x100, hash)
        }
mstore8(288, 1)
mstore(0x120, keccak256(0x100, 33))
{
            let hash := mload(0x120)
            mstore(0x140, mod(hash, f_q))
            mstore(0x160, hash)
        }
mstore8(384, 1)
mstore(0x180, keccak256(0x160, 33))
{
            let hash := mload(0x180)
            mstore(0x1a0, mod(hash, f_q))
            mstore(0x1c0, hash)
        }

        {
            let x := calldataload(0xa0)
            mstore(0x1e0, x)
            let y := calldataload(0xc0)
            mstore(0x200, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0xe0)
            mstore(0x220, x)
            let y := calldataload(0x100)
            mstore(0x240, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x120)
            mstore(0x260, x)
            let y := calldataload(0x140)
            mstore(0x280, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x160)
            mstore(0x2a0, x)
            let y := calldataload(0x180)
            mstore(0x2c0, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x1a0)
            mstore(0x2e0, x)
            let y := calldataload(0x1c0)
            mstore(0x300, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x1e0)
            mstore(0x320, x)
            let y := calldataload(0x200)
            mstore(0x340, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0x360, keccak256(0x1c0, 416))
{
            let hash := mload(0x360)
            mstore(0x380, mod(hash, f_q))
            mstore(0x3a0, hash)
        }

        {
            let x := calldataload(0x220)
            mstore(0x3c0, x)
            let y := calldataload(0x240)
            mstore(0x3e0, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x260)
            mstore(0x400, x)
            let y := calldataload(0x280)
            mstore(0x420, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0x440, keccak256(0x3a0, 160))
{
            let hash := mload(0x440)
            mstore(0x460, mod(hash, f_q))
            mstore(0x480, hash)
        }
mstore(0x4a0, mod(calldataload(0x2a0), f_q))
mstore(0x4c0, mod(calldataload(0x2c0), f_q))
mstore(0x4e0, mod(calldataload(0x2e0), f_q))
mstore(0x500, mod(calldataload(0x300), f_q))
mstore(0x520, mod(calldataload(0x320), f_q))
mstore(0x540, mod(calldataload(0x340), f_q))
mstore(0x560, mod(calldataload(0x360), f_q))
mstore(0x580, mod(calldataload(0x380), f_q))
mstore(0x5a0, mod(calldataload(0x3a0), f_q))
mstore(0x5c0, mod(calldataload(0x3c0), f_q))
mstore(0x5e0, mod(calldataload(0x3e0), f_q))
mstore(0x600, mod(calldataload(0x400), f_q))
mstore(0x620, mod(calldataload(0x420), f_q))
mstore(0x640, mod(calldataload(0x440), f_q))
mstore(0x660, mod(calldataload(0x460), f_q))
mstore(0x680, mod(calldataload(0x480), f_q))
mstore(0x6a0, mod(calldataload(0x4a0), f_q))
mstore(0x6c0, mod(calldataload(0x4c0), f_q))
mstore(0x6e0, mod(calldataload(0x4e0), f_q))
mstore(0x700, mod(calldataload(0x500), f_q))
mstore(0x720, mod(calldataload(0x520), f_q))
mstore(0x740, mod(calldataload(0x540), f_q))
mstore(0x760, mod(calldataload(0x560), f_q))
mstore(0x780, mod(calldataload(0x580), f_q))
mstore(0x7a0, mod(calldataload(0x5a0), f_q))
mstore(0x7c0, mod(calldataload(0x5c0), f_q))
mstore(0x7e0, keccak256(0x480, 864))
{
            let hash := mload(0x7e0)
            mstore(0x800, mod(hash, f_q))
            mstore(0x820, hash)
        }

        {
            let x := calldataload(0x5e0)
            mstore(0x840, x)
            let y := calldataload(0x600)
            mstore(0x860, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x620)
            mstore(0x880, x)
            let y := calldataload(0x640)
            mstore(0x8a0, y)
            success := and(validate_ec_point(x, y), success)
        }

        {
            let x := calldataload(0x660)
            mstore(0x8c0, x)
            let y := calldataload(0x680)
            mstore(0x8e0, y)
            success := and(validate_ec_point(x, y), success)
        }
mstore(0x900, keccak256(0x820, 224))
{
            let hash := mload(0x900)
            mstore(0x920, mod(hash, f_q))
            mstore(0x940, hash)
        }
mstore(0x960, mulmod(mload(0x460), mload(0x460), f_q))
mstore(0x980, mulmod(mload(0x960), mload(0x960), f_q))
mstore(0x9a0, mulmod(mload(0x980), mload(0x980), f_q))
mstore(0x9c0, mulmod(mload(0x9a0), mload(0x9a0), f_q))
mstore(0x9e0, mulmod(mload(0x9c0), mload(0x9c0), f_q))
mstore(0xa00, mulmod(mload(0x9e0), mload(0x9e0), f_q))
mstore(0xa20, mulmod(mload(0xa00), mload(0xa00), f_q))
mstore(0xa40, mulmod(mload(0xa20), mload(0xa20), f_q))
mstore(0xa60, mulmod(mload(0xa40), mload(0xa40), f_q))
mstore(0xa80, addmod(mload(0xa60), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))
mstore(0xaa0, mulmod(mload(0xa80), 21845492397480214137827955734036069473141043376196471776620668631523902619649, f_q))
mstore(0xac0, mulmod(mload(0xaa0), 11423757818648818765461327411617109120243501240676889555478397529313037714234, f_q))
mstore(0xae0, addmod(mload(0x460), 10464485053190456456785078333640165968304863159739144788219806657262770781383, f_q))
mstore(0xb00, mulmod(mload(0xaa0), 18658909205715493985327367002986689246357274798059125448824250603171843521466, f_q))
mstore(0xb20, addmod(mload(0x460), 3229333666123781236919038742270585842191089602356908894873953583403964974151, f_q))
mstore(0xb40, mulmod(mload(0xaa0), 13677048343952077794467995888380402608453928821079198134318291065290235358859, f_q))
mstore(0xb60, addmod(mload(0x460), 8211194527887197427778409856876872480094435579336836209379913121285573136758, f_q))
mstore(0xb80, mulmod(mload(0xaa0), 9936069627611189518829255670237324269287146421271524553312532036927871056678, f_q))
mstore(0xba0, addmod(mload(0x460), 11952173244228085703417150075019950819261217979144509790385672149647937438939, f_q))
mstore(0xbc0, mulmod(mload(0xaa0), 14158528901797138466244491986759313854666262535363044392173788062030301470987, f_q))
mstore(0xbe0, addmod(mload(0x460), 7729713970042136756001913758497961233882101865052989951524416124545507024630, f_q))
mstore(0xc00, mulmod(mload(0xaa0), 4260969412351770314333984243767775737437927068151180798236715529158398853173, f_q))
mstore(0xc20, addmod(mload(0x460), 17627273459487504907912421501489499351110437332264853545461488657417409642444, f_q))
mstore(0xc40, mulmod(mload(0xaa0), 1, f_q))
mstore(0xc60, addmod(mload(0x460), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))
{
            let prod := mload(0xae0)

                prod := mulmod(mload(0xb20), prod, f_q)
                mstore(0xc80, prod)
            
                prod := mulmod(mload(0xb60), prod, f_q)
                mstore(0xca0, prod)
            
                prod := mulmod(mload(0xba0), prod, f_q)
                mstore(0xcc0, prod)
            
                prod := mulmod(mload(0xbe0), prod, f_q)
                mstore(0xce0, prod)
            
                prod := mulmod(mload(0xc20), prod, f_q)
                mstore(0xd00, prod)
            
                prod := mulmod(mload(0xc60), prod, f_q)
                mstore(0xd20, prod)
            
                prod := mulmod(mload(0xa80), prod, f_q)
                mstore(0xd40, prod)
            
        }
mstore(0xd80, 32)
mstore(0xda0, 32)
mstore(0xdc0, 32)
mstore(0xde0, mload(0xd40))
mstore(0xe00, 21888242871839275222246405745257275088548364400416034343698204186575808495615)
mstore(0xe20, 21888242871839275222246405745257275088548364400416034343698204186575808495617)
success := and(eq(staticcall(gas(), 0x5, 0xd80, 0xc0, 0xd60, 0x20), 1), success)
{
            
            let inv := mload(0xd60)
            let v
        
                    v := mload(0xa80)
                    mstore(2688, mulmod(mload(0xd20), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0xc60)
                    mstore(3168, mulmod(mload(0xd00), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0xc20)
                    mstore(3104, mulmod(mload(0xce0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0xbe0)
                    mstore(3040, mulmod(mload(0xcc0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0xba0)
                    mstore(2976, mulmod(mload(0xca0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0xb60)
                    mstore(2912, mulmod(mload(0xc80), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                
                    v := mload(0xb20)
                    mstore(2848, mulmod(mload(0xae0), inv, f_q))
                    inv := mulmod(v, inv, f_q)
                mstore(0xae0, inv)

        }
mstore(0xe40, mulmod(mload(0xac0), mload(0xae0), f_q))
mstore(0xe60, mulmod(mload(0xb00), mload(0xb20), f_q))
mstore(0xe80, mulmod(mload(0xb40), mload(0xb60), f_q))
mstore(0xea0, mulmod(mload(0xb80), mload(0xba0), f_q))
mstore(0xec0, mulmod(mload(0xbc0), mload(0xbe0), f_q))
mstore(0xee0, mulmod(mload(0xc00), mload(0xc20), f_q))
mstore(0xf00, mulmod(mload(0xc40), mload(0xc60), f_q))
{
            let result := mulmod(mload(0xf00), mload(0x20), f_q)
mstore(3872, result)
        }
mstore(0xf40, addmod(0, mload(0x4a0), f_q))
mstore(0xf60, addmod(mload(0xf40), mload(0x4c0), f_q))
mstore(0xf80, addmod(mload(0xf60), mload(0x500), f_q))
mstore(0xfa0, addmod(mload(0xf80), mload(0x520), f_q))
mstore(0xfc0, addmod(mload(0x4e0), sub(f_q, mload(0xfa0)), f_q))
mstore(0xfe0, mulmod(mload(0xfc0), mload(0x540), f_q))
mstore(0x1000, mulmod(mload(0x380), mload(0xfe0), f_q))
mstore(0x1020, addmod(1, sub(f_q, mload(0x620)), f_q))
mstore(0x1040, mulmod(mload(0x1020), mload(0xf00), f_q))
mstore(0x1060, addmod(mload(0x1000), mload(0x1040), f_q))
mstore(0x1080, mulmod(mload(0x380), mload(0x1060), f_q))
mstore(0x10a0, mulmod(mload(0x7a0), mload(0x7a0), f_q))
mstore(0x10c0, addmod(mload(0x10a0), sub(f_q, mload(0x7a0)), f_q))
mstore(0x10e0, mulmod(mload(0x10c0), mload(0xe40), f_q))
mstore(0x1100, addmod(mload(0x1080), mload(0x10e0), f_q))
mstore(0x1120, mulmod(mload(0x380), mload(0x1100), f_q))
mstore(0x1140, addmod(mload(0x680), sub(f_q, mload(0x660)), f_q))
mstore(0x1160, mulmod(mload(0x1140), mload(0xf00), f_q))
mstore(0x1180, addmod(mload(0x1120), mload(0x1160), f_q))
mstore(0x11a0, mulmod(mload(0x380), mload(0x1180), f_q))
mstore(0x11c0, addmod(mload(0x6e0), sub(f_q, mload(0x6c0)), f_q))
mstore(0x11e0, mulmod(mload(0x11c0), mload(0xf00), f_q))
mstore(0x1200, addmod(mload(0x11a0), mload(0x11e0), f_q))
mstore(0x1220, mulmod(mload(0x380), mload(0x1200), f_q))
mstore(0x1240, addmod(mload(0x740), sub(f_q, mload(0x720)), f_q))
mstore(0x1260, mulmod(mload(0x1240), mload(0xf00), f_q))
mstore(0x1280, addmod(mload(0x1220), mload(0x1260), f_q))
mstore(0x12a0, mulmod(mload(0x380), mload(0x1280), f_q))
mstore(0x12c0, addmod(mload(0x7a0), sub(f_q, mload(0x780)), f_q))
mstore(0x12e0, mulmod(mload(0x12c0), mload(0xf00), f_q))
mstore(0x1300, addmod(mload(0x12a0), mload(0x12e0), f_q))
mstore(0x1320, mulmod(mload(0x380), mload(0x1300), f_q))
mstore(0x1340, addmod(1, sub(f_q, mload(0xe40)), f_q))
mstore(0x1360, addmod(mload(0xe60), mload(0xe80), f_q))
mstore(0x1380, addmod(mload(0x1360), mload(0xea0), f_q))
mstore(0x13a0, addmod(mload(0x1380), mload(0xec0), f_q))
mstore(0x13c0, addmod(mload(0x13a0), mload(0xee0), f_q))
mstore(0x13e0, addmod(mload(0x1340), sub(f_q, mload(0x13c0)), f_q))
mstore(0x1400, mulmod(mload(0x580), mload(0x140), f_q))
mstore(0x1420, addmod(mload(0x4a0), mload(0x1400), f_q))
mstore(0x1440, addmod(mload(0x1420), mload(0x1a0), f_q))
mstore(0x1460, mulmod(mload(0x1440), mload(0x640), f_q))
mstore(0x1480, mulmod(1, mload(0x140), f_q))
mstore(0x14a0, mulmod(mload(0x460), mload(0x1480), f_q))
mstore(0x14c0, addmod(mload(0x4a0), mload(0x14a0), f_q))
mstore(0x14e0, addmod(mload(0x14c0), mload(0x1a0), f_q))
mstore(0x1500, mulmod(mload(0x14e0), mload(0x620), f_q))
mstore(0x1520, addmod(mload(0x1460), sub(f_q, mload(0x1500)), f_q))
mstore(0x1540, mulmod(mload(0x1520), mload(0x13e0), f_q))
mstore(0x1560, addmod(mload(0x1320), mload(0x1540), f_q))
mstore(0x1580, mulmod(mload(0x380), mload(0x1560), f_q))
mstore(0x15a0, mulmod(mload(0x5a0), mload(0x140), f_q))
mstore(0x15c0, addmod(mload(0x4c0), mload(0x15a0), f_q))
mstore(0x15e0, addmod(mload(0x15c0), mload(0x1a0), f_q))
mstore(0x1600, mulmod(mload(0x15e0), mload(0x6a0), f_q))
mstore(0x1620, mulmod(4131629893567559867359510883348571134090853742863529169391034518566172092834, mload(0x140), f_q))
mstore(0x1640, mulmod(mload(0x460), mload(0x1620), f_q))
mstore(0x1660, addmod(mload(0x4c0), mload(0x1640), f_q))
mstore(0x1680, addmod(mload(0x1660), mload(0x1a0), f_q))
mstore(0x16a0, mulmod(mload(0x1680), mload(0x680), f_q))
mstore(0x16c0, addmod(mload(0x1600), sub(f_q, mload(0x16a0)), f_q))
mstore(0x16e0, mulmod(mload(0x16c0), mload(0x13e0), f_q))
mstore(0x1700, addmod(mload(0x1580), mload(0x16e0), f_q))
mstore(0x1720, mulmod(mload(0x380), mload(0x1700), f_q))
mstore(0x1740, mulmod(mload(0x5c0), mload(0x140), f_q))
mstore(0x1760, addmod(mload(0x500), mload(0x1740), f_q))
mstore(0x1780, addmod(mload(0x1760), mload(0x1a0), f_q))
mstore(0x17a0, mulmod(mload(0x1780), mload(0x700), f_q))
mstore(0x17c0, mulmod(8910878055287538404433155982483128285667088683464058436815641868457422632747, mload(0x140), f_q))
mstore(0x17e0, mulmod(mload(0x460), mload(0x17c0), f_q))
mstore(0x1800, addmod(mload(0x500), mload(0x17e0), f_q))
mstore(0x1820, addmod(mload(0x1800), mload(0x1a0), f_q))
mstore(0x1840, mulmod(mload(0x1820), mload(0x6e0), f_q))
mstore(0x1860, addmod(mload(0x17a0), sub(f_q, mload(0x1840)), f_q))
mstore(0x1880, mulmod(mload(0x1860), mload(0x13e0), f_q))
mstore(0x18a0, addmod(mload(0x1720), mload(0x1880), f_q))
mstore(0x18c0, mulmod(mload(0x380), mload(0x18a0), f_q))
mstore(0x18e0, mulmod(mload(0x5e0), mload(0x140), f_q))
mstore(0x1900, addmod(mload(0x520), mload(0x18e0), f_q))
mstore(0x1920, addmod(mload(0x1900), mload(0x1a0), f_q))
mstore(0x1940, mulmod(mload(0x1920), mload(0x760), f_q))
mstore(0x1960, mulmod(11166246659983828508719468090013646171463329086121580628794302409516816350802, mload(0x140), f_q))
mstore(0x1980, mulmod(mload(0x460), mload(0x1960), f_q))
mstore(0x19a0, addmod(mload(0x520), mload(0x1980), f_q))
mstore(0x19c0, addmod(mload(0x19a0), mload(0x1a0), f_q))
mstore(0x19e0, mulmod(mload(0x19c0), mload(0x740), f_q))
mstore(0x1a00, addmod(mload(0x1940), sub(f_q, mload(0x19e0)), f_q))
mstore(0x1a20, mulmod(mload(0x1a00), mload(0x13e0), f_q))
mstore(0x1a40, addmod(mload(0x18c0), mload(0x1a20), f_q))
mstore(0x1a60, mulmod(mload(0x380), mload(0x1a40), f_q))
mstore(0x1a80, mulmod(mload(0x600), mload(0x140), f_q))
mstore(0x1aa0, addmod(mload(0xf20), mload(0x1a80), f_q))
mstore(0x1ac0, addmod(mload(0x1aa0), mload(0x1a0), f_q))
mstore(0x1ae0, mulmod(mload(0x1ac0), mload(0x7c0), f_q))
mstore(0x1b00, mulmod(284840088355319032285349970403338060113257071685626700086398481893096618818, mload(0x140), f_q))
mstore(0x1b20, mulmod(mload(0x460), mload(0x1b00), f_q))
mstore(0x1b40, addmod(mload(0xf20), mload(0x1b20), f_q))
mstore(0x1b60, addmod(mload(0x1b40), mload(0x1a0), f_q))
mstore(0x1b80, mulmod(mload(0x1b60), mload(0x7a0), f_q))
mstore(0x1ba0, addmod(mload(0x1ae0), sub(f_q, mload(0x1b80)), f_q))
mstore(0x1bc0, mulmod(mload(0x1ba0), mload(0x13e0), f_q))
mstore(0x1be0, addmod(mload(0x1a60), mload(0x1bc0), f_q))
mstore(0x1c00, mulmod(mload(0xa60), mload(0xa60), f_q))
mstore(0x1c20, mulmod(1, mload(0xa60), f_q))
mstore(0x1c40, mulmod(mload(0x1be0), mload(0xa80), f_q))
mstore(0x1c60, mulmod(mload(0x920), mload(0x920), f_q))
mstore(0x1c80, mulmod(mload(0x1c60), mload(0x920), f_q))
mstore(0x1ca0, mulmod(mload(0x800), mload(0x800), f_q))
mstore(0x1cc0, mulmod(mload(0x1ca0), mload(0x800), f_q))
mstore(0x1ce0, mulmod(mload(0x1cc0), mload(0x800), f_q))
mstore(0x1d00, mulmod(mload(0x1ce0), mload(0x800), f_q))
mstore(0x1d20, mulmod(mload(0x1d00), mload(0x800), f_q))
mstore(0x1d40, mulmod(mload(0x1d20), mload(0x800), f_q))
mstore(0x1d60, mulmod(mload(0x1d40), mload(0x800), f_q))
mstore(0x1d80, mulmod(mload(0x1d60), mload(0x800), f_q))
mstore(0x1da0, mulmod(mload(0x1d80), mload(0x800), f_q))
mstore(0x1dc0, mulmod(mload(0x1da0), mload(0x800), f_q))
mstore(0x1de0, mulmod(mload(0x1dc0), mload(0x800), f_q))
mstore(0x1e00, mulmod(mload(0x1de0), mload(0x800), f_q))
mstore(0x1e20, mulmod(mload(0x1e00), mload(0x800), f_q))
mstore(0x1e40, mulmod(mload(0x1e20), mload(0x800), f_q))
mstore(0x1e60, mulmod(mload(0x1e40), mload(0x800), f_q))
mstore(0x1e80, mulmod(mload(0x1e60), mload(0x800), f_q))
mstore(0x1ea0, mulmod(sub(f_q, mload(0x4a0)), 1, f_q))
mstore(0x1ec0, mulmod(sub(f_q, mload(0x4c0)), mload(0x800), f_q))
mstore(0x1ee0, mulmod(1, mload(0x800), f_q))
mstore(0x1f00, addmod(mload(0x1ea0), mload(0x1ec0), f_q))
mstore(0x1f20, mulmod(sub(f_q, mload(0x620)), mload(0x1ca0), f_q))
mstore(0x1f40, mulmod(1, mload(0x1ca0), f_q))
mstore(0x1f60, addmod(mload(0x1f00), mload(0x1f20), f_q))
mstore(0x1f80, mulmod(sub(f_q, mload(0x680)), mload(0x1cc0), f_q))
mstore(0x1fa0, mulmod(1, mload(0x1cc0), f_q))
mstore(0x1fc0, addmod(mload(0x1f60), mload(0x1f80), f_q))
mstore(0x1fe0, mulmod(sub(f_q, mload(0x6e0)), mload(0x1ce0), f_q))
mstore(0x2000, mulmod(1, mload(0x1ce0), f_q))
mstore(0x2020, addmod(mload(0x1fc0), mload(0x1fe0), f_q))
mstore(0x2040, mulmod(sub(f_q, mload(0x740)), mload(0x1d00), f_q))
mstore(0x2060, mulmod(1, mload(0x1d00), f_q))
mstore(0x2080, addmod(mload(0x2020), mload(0x2040), f_q))
mstore(0x20a0, mulmod(sub(f_q, mload(0x7a0)), mload(0x1d20), f_q))
mstore(0x20c0, mulmod(1, mload(0x1d20), f_q))
mstore(0x20e0, addmod(mload(0x2080), mload(0x20a0), f_q))
mstore(0x2100, mulmod(sub(f_q, mload(0x500)), mload(0x1d40), f_q))
mstore(0x2120, mulmod(1, mload(0x1d40), f_q))
mstore(0x2140, addmod(mload(0x20e0), mload(0x2100), f_q))
mstore(0x2160, mulmod(sub(f_q, mload(0x520)), mload(0x1d60), f_q))
mstore(0x2180, mulmod(1, mload(0x1d60), f_q))
mstore(0x21a0, addmod(mload(0x2140), mload(0x2160), f_q))
mstore(0x21c0, addmod(mload(0x2120), mload(0x2180), f_q))
mstore(0x21e0, mulmod(sub(f_q, mload(0x540)), mload(0x1d80), f_q))
mstore(0x2200, mulmod(1, mload(0x1d80), f_q))
mstore(0x2220, addmod(mload(0x21a0), mload(0x21e0), f_q))
mstore(0x2240, addmod(mload(0x21c0), mload(0x2200), f_q))
mstore(0x2260, mulmod(sub(f_q, mload(0x580)), mload(0x1da0), f_q))
mstore(0x2280, mulmod(1, mload(0x1da0), f_q))
mstore(0x22a0, addmod(mload(0x2220), mload(0x2260), f_q))
mstore(0x22c0, mulmod(sub(f_q, mload(0x5a0)), mload(0x1dc0), f_q))
mstore(0x22e0, mulmod(1, mload(0x1dc0), f_q))
mstore(0x2300, addmod(mload(0x22a0), mload(0x22c0), f_q))
mstore(0x2320, mulmod(sub(f_q, mload(0x5c0)), mload(0x1de0), f_q))
mstore(0x2340, mulmod(1, mload(0x1de0), f_q))
mstore(0x2360, addmod(mload(0x2300), mload(0x2320), f_q))
mstore(0x2380, mulmod(sub(f_q, mload(0x5e0)), mload(0x1e00), f_q))
mstore(0x23a0, mulmod(1, mload(0x1e00), f_q))
mstore(0x23c0, addmod(mload(0x2360), mload(0x2380), f_q))
mstore(0x23e0, mulmod(sub(f_q, mload(0x600)), mload(0x1e20), f_q))
mstore(0x2400, mulmod(1, mload(0x1e20), f_q))
mstore(0x2420, addmod(mload(0x23c0), mload(0x23e0), f_q))
mstore(0x2440, mulmod(sub(f_q, mload(0x1c40)), mload(0x1e40), f_q))
mstore(0x2460, mulmod(1, mload(0x1e40), f_q))
mstore(0x2480, mulmod(mload(0x1c20), mload(0x1e40), f_q))
mstore(0x24a0, addmod(mload(0x2420), mload(0x2440), f_q))
mstore(0x24c0, mulmod(sub(f_q, mload(0x560)), mload(0x1e60), f_q))
mstore(0x24e0, mulmod(1, mload(0x1e60), f_q))
mstore(0x2500, addmod(mload(0x24a0), mload(0x24c0), f_q))
mstore(0x2520, mulmod(mload(0x2500), 1, f_q))
mstore(0x2540, mulmod(mload(0x1ee0), 1, f_q))
mstore(0x2560, mulmod(mload(0x1f40), 1, f_q))
mstore(0x2580, mulmod(mload(0x1fa0), 1, f_q))
mstore(0x25a0, mulmod(mload(0x2000), 1, f_q))
mstore(0x25c0, mulmod(mload(0x2060), 1, f_q))
mstore(0x25e0, mulmod(mload(0x20c0), 1, f_q))
mstore(0x2600, mulmod(mload(0x2240), 1, f_q))
mstore(0x2620, mulmod(mload(0x2280), 1, f_q))
mstore(0x2640, mulmod(mload(0x22e0), 1, f_q))
mstore(0x2660, mulmod(mload(0x2340), 1, f_q))
mstore(0x2680, mulmod(mload(0x23a0), 1, f_q))
mstore(0x26a0, mulmod(mload(0x2400), 1, f_q))
mstore(0x26c0, mulmod(mload(0x2460), 1, f_q))
mstore(0x26e0, mulmod(mload(0x2480), 1, f_q))
mstore(0x2700, mulmod(mload(0x24e0), 1, f_q))
mstore(0x2720, mulmod(sub(f_q, mload(0x4e0)), 1, f_q))
mstore(0x2740, mulmod(sub(f_q, mload(0x640)), mload(0x800), f_q))
mstore(0x2760, addmod(mload(0x2720), mload(0x2740), f_q))
mstore(0x2780, mulmod(sub(f_q, mload(0x6a0)), mload(0x1ca0), f_q))
mstore(0x27a0, addmod(mload(0x2760), mload(0x2780), f_q))
mstore(0x27c0, mulmod(sub(f_q, mload(0x700)), mload(0x1cc0), f_q))
mstore(0x27e0, addmod(mload(0x27a0), mload(0x27c0), f_q))
mstore(0x2800, mulmod(sub(f_q, mload(0x760)), mload(0x1ce0), f_q))
mstore(0x2820, addmod(mload(0x27e0), mload(0x2800), f_q))
mstore(0x2840, mulmod(sub(f_q, mload(0x7c0)), mload(0x1d00), f_q))
mstore(0x2860, addmod(mload(0x2820), mload(0x2840), f_q))
mstore(0x2880, mulmod(mload(0x2860), mload(0x920), f_q))
mstore(0x28a0, mulmod(1, mload(0x920), f_q))
mstore(0x28c0, mulmod(mload(0x1ee0), mload(0x920), f_q))
mstore(0x28e0, mulmod(mload(0x1f40), mload(0x920), f_q))
mstore(0x2900, mulmod(mload(0x1fa0), mload(0x920), f_q))
mstore(0x2920, mulmod(mload(0x2000), mload(0x920), f_q))
mstore(0x2940, mulmod(mload(0x2060), mload(0x920), f_q))
mstore(0x2960, addmod(mload(0x2520), mload(0x2880), f_q))
mstore(0x2980, addmod(1, mload(0x28a0), f_q))
mstore(0x29a0, addmod(mload(0x2560), mload(0x28c0), f_q))
mstore(0x29c0, addmod(mload(0x2580), mload(0x28e0), f_q))
mstore(0x29e0, addmod(mload(0x25a0), mload(0x2900), f_q))
mstore(0x2a00, addmod(mload(0x25c0), mload(0x2920), f_q))
mstore(0x2a20, addmod(mload(0x25e0), mload(0x2940), f_q))
mstore(0x2a40, mulmod(sub(f_q, mload(0x780)), 1, f_q))
mstore(0x2a60, mulmod(sub(f_q, mload(0x720)), mload(0x800), f_q))
mstore(0x2a80, addmod(mload(0x2a40), mload(0x2a60), f_q))
mstore(0x2aa0, mulmod(sub(f_q, mload(0x6c0)), mload(0x1ca0), f_q))
mstore(0x2ac0, addmod(mload(0x2a80), mload(0x2aa0), f_q))
mstore(0x2ae0, mulmod(sub(f_q, mload(0x660)), mload(0x1cc0), f_q))
mstore(0x2b00, addmod(mload(0x2ac0), mload(0x2ae0), f_q))
mstore(0x2b20, mulmod(mload(0x2b00), mload(0x1c60), f_q))
mstore(0x2b40, mulmod(1, mload(0x1c60), f_q))
mstore(0x2b60, mulmod(mload(0x1ee0), mload(0x1c60), f_q))
mstore(0x2b80, mulmod(mload(0x1f40), mload(0x1c60), f_q))
mstore(0x2ba0, mulmod(mload(0x1fa0), mload(0x1c60), f_q))
mstore(0x2bc0, addmod(mload(0x2960), mload(0x2b20), f_q))
mstore(0x2be0, addmod(mload(0x2a00), mload(0x2b40), f_q))
mstore(0x2c00, addmod(mload(0x29e0), mload(0x2b60), f_q))
mstore(0x2c20, addmod(mload(0x29c0), mload(0x2b80), f_q))
mstore(0x2c40, addmod(mload(0x29a0), mload(0x2ba0), f_q))
mstore(0x2c60, mulmod(1, mload(0x460), f_q))
mstore(0x2c80, mulmod(1, mload(0x2c60), f_q))
mstore(0x2ca0, mulmod(6252951856119339508807713076978770803512896272623217303779254502899773638908, mload(0x460), f_q))
mstore(0x2cc0, mulmod(mload(0x28a0), mload(0x2ca0), f_q))
mstore(0x2ce0, mulmod(11423757818648818765461327411617109120243501240676889555478397529313037714234, mload(0x460), f_q))
mstore(0x2d00, mulmod(mload(0x2b40), mload(0x2ce0), f_q))
mstore(0x2d20, 0x0000000000000000000000000000000000000000000000000000000000000001)
                    mstore(0x2d40, 0x0000000000000000000000000000000000000000000000000000000000000002)
mstore(0x2d60, mload(0x2bc0))
success := and(eq(staticcall(gas(), 0x7, 0x2d20, 0x60, 0x2d20, 0x40), 1), success)
mstore(0x2d80, mload(0x40))
                    mstore(0x2da0, mload(0x60))
mstore(0x2dc0, mload(0x2980))
success := and(eq(staticcall(gas(), 0x7, 0x2d80, 0x60, 0x2d80, 0x40), 1), success)
mstore(0x2de0, mload(0x2d20))
                    mstore(0x2e00, mload(0x2d40))
mstore(0x2e20, mload(0x2d80))
                    mstore(0x2e40, mload(0x2da0))
success := and(eq(staticcall(gas(), 0x6, 0x2de0, 0x80, 0x2de0, 0x40), 1), success)
mstore(0x2e60, mload(0x80))
                    mstore(0x2e80, mload(0xa0))
mstore(0x2ea0, mload(0x2540))
success := and(eq(staticcall(gas(), 0x7, 0x2e60, 0x60, 0x2e60, 0x40), 1), success)
mstore(0x2ec0, mload(0x2de0))
                    mstore(0x2ee0, mload(0x2e00))
mstore(0x2f00, mload(0x2e60))
                    mstore(0x2f20, mload(0x2e80))
success := and(eq(staticcall(gas(), 0x6, 0x2ec0, 0x80, 0x2ec0, 0x40), 1), success)
mstore(0x2f40, mload(0x1e0))
                    mstore(0x2f60, mload(0x200))
mstore(0x2f80, mload(0x2c40))
success := and(eq(staticcall(gas(), 0x7, 0x2f40, 0x60, 0x2f40, 0x40), 1), success)
mstore(0x2fa0, mload(0x2ec0))
                    mstore(0x2fc0, mload(0x2ee0))
mstore(0x2fe0, mload(0x2f40))
                    mstore(0x3000, mload(0x2f60))
success := and(eq(staticcall(gas(), 0x6, 0x2fa0, 0x80, 0x2fa0, 0x40), 1), success)
mstore(0x3020, mload(0x220))
                    mstore(0x3040, mload(0x240))
mstore(0x3060, mload(0x2c20))
success := and(eq(staticcall(gas(), 0x7, 0x3020, 0x60, 0x3020, 0x40), 1), success)
mstore(0x3080, mload(0x2fa0))
                    mstore(0x30a0, mload(0x2fc0))
mstore(0x30c0, mload(0x3020))
                    mstore(0x30e0, mload(0x3040))
success := and(eq(staticcall(gas(), 0x6, 0x3080, 0x80, 0x3080, 0x40), 1), success)
mstore(0x3100, mload(0x260))
                    mstore(0x3120, mload(0x280))
mstore(0x3140, mload(0x2c00))
success := and(eq(staticcall(gas(), 0x7, 0x3100, 0x60, 0x3100, 0x40), 1), success)
mstore(0x3160, mload(0x3080))
                    mstore(0x3180, mload(0x30a0))
mstore(0x31a0, mload(0x3100))
                    mstore(0x31c0, mload(0x3120))
success := and(eq(staticcall(gas(), 0x6, 0x3160, 0x80, 0x3160, 0x40), 1), success)
mstore(0x31e0, mload(0x2a0))
                    mstore(0x3200, mload(0x2c0))
mstore(0x3220, mload(0x2be0))
success := and(eq(staticcall(gas(), 0x7, 0x31e0, 0x60, 0x31e0, 0x40), 1), success)
mstore(0x3240, mload(0x3160))
                    mstore(0x3260, mload(0x3180))
mstore(0x3280, mload(0x31e0))
                    mstore(0x32a0, mload(0x3200))
success := and(eq(staticcall(gas(), 0x6, 0x3240, 0x80, 0x3240, 0x40), 1), success)
mstore(0x32c0, mload(0x2e0))
                    mstore(0x32e0, mload(0x300))
mstore(0x3300, mload(0x2a20))
success := and(eq(staticcall(gas(), 0x7, 0x32c0, 0x60, 0x32c0, 0x40), 1), success)
mstore(0x3320, mload(0x3240))
                    mstore(0x3340, mload(0x3260))
mstore(0x3360, mload(0x32c0))
                    mstore(0x3380, mload(0x32e0))
success := and(eq(staticcall(gas(), 0x6, 0x3320, 0x80, 0x3320, 0x40), 1), success)
mstore(0x33a0, 0x114e7d6f20b3c75f2ded8a66825a010b8ec1753da9e11df3ee44a98eff77c2e2)
                    mstore(0x33c0, 0x2cafe342d82a7f56810baef2a192c46bca4d205d0cea53a88cc8563d8ee39d4f)
mstore(0x33e0, mload(0x2600))
success := and(eq(staticcall(gas(), 0x7, 0x33a0, 0x60, 0x33a0, 0x40), 1), success)
mstore(0x3400, mload(0x3320))
                    mstore(0x3420, mload(0x3340))
mstore(0x3440, mload(0x33a0))
                    mstore(0x3460, mload(0x33c0))
success := and(eq(staticcall(gas(), 0x6, 0x3400, 0x80, 0x3400, 0x40), 1), success)
mstore(0x3480, 0x0e424280eafaec0aa2228a2cc41ac55fc16c13cffb592fb3f049d1c7f18d973d)
                    mstore(0x34a0, 0x112b8c92f45fea2b9acd0f5ab75766151d6ef5e350582fc8ecf8f512c95d77ba)
mstore(0x34c0, mload(0x2620))
success := and(eq(staticcall(gas(), 0x7, 0x3480, 0x60, 0x3480, 0x40), 1), success)
mstore(0x34e0, mload(0x3400))
                    mstore(0x3500, mload(0x3420))
mstore(0x3520, mload(0x3480))
                    mstore(0x3540, mload(0x34a0))
success := and(eq(staticcall(gas(), 0x6, 0x34e0, 0x80, 0x34e0, 0x40), 1), success)
mstore(0x3560, 0x00ff45067022384f7f66e77ba6ff58122fc22b2093c491b04b644a0538f2125d)
                    mstore(0x3580, 0x061f121703b33479361fae90aab27d47f5aa6f4449a52a97499f4aba9a8f015c)
mstore(0x35a0, mload(0x2640))
success := and(eq(staticcall(gas(), 0x7, 0x3560, 0x60, 0x3560, 0x40), 1), success)
mstore(0x35c0, mload(0x34e0))
                    mstore(0x35e0, mload(0x3500))
mstore(0x3600, mload(0x3560))
                    mstore(0x3620, mload(0x3580))
success := and(eq(staticcall(gas(), 0x6, 0x35c0, 0x80, 0x35c0, 0x40), 1), success)
mstore(0x3640, 0x2a9513200cc1f509f22563ddd9626ad51a3556657d2e343292e5efb76a84f181)
                    mstore(0x3660, 0x05d7c6e0d3bb8f04b949476651954a94cc5b1ca0994e5c178148fc21a6426e72)
mstore(0x3680, mload(0x2660))
success := and(eq(staticcall(gas(), 0x7, 0x3640, 0x60, 0x3640, 0x40), 1), success)
mstore(0x36a0, mload(0x35c0))
                    mstore(0x36c0, mload(0x35e0))
mstore(0x36e0, mload(0x3640))
                    mstore(0x3700, mload(0x3660))
success := and(eq(staticcall(gas(), 0x6, 0x36a0, 0x80, 0x36a0, 0x40), 1), success)
mstore(0x3720, 0x028faa03860aa4459e2dee6870bc87a950cb7b36de7c8c1326f5eb3693d69d25)
                    mstore(0x3740, 0x10ad0844f83f895013015735eb684c33ccda08ba2d9cf171a9044c9a653303ee)
mstore(0x3760, mload(0x2680))
success := and(eq(staticcall(gas(), 0x7, 0x3720, 0x60, 0x3720, 0x40), 1), success)
mstore(0x3780, mload(0x36a0))
                    mstore(0x37a0, mload(0x36c0))
mstore(0x37c0, mload(0x3720))
                    mstore(0x37e0, mload(0x3740))
success := and(eq(staticcall(gas(), 0x6, 0x3780, 0x80, 0x3780, 0x40), 1), success)
mstore(0x3800, 0x127caf3f350c46114d71e1f8ffb88817c9317789136a7760912ebaf054ca1883)
                    mstore(0x3820, 0x22354c1333346698ac4f4eaa7a9c75c06d52dd532b6fc0045c1f9f66cbd6f1fa)
mstore(0x3840, mload(0x26a0))
success := and(eq(staticcall(gas(), 0x7, 0x3800, 0x60, 0x3800, 0x40), 1), success)
mstore(0x3860, mload(0x3780))
                    mstore(0x3880, mload(0x37a0))
mstore(0x38a0, mload(0x3800))
                    mstore(0x38c0, mload(0x3820))
success := and(eq(staticcall(gas(), 0x6, 0x3860, 0x80, 0x3860, 0x40), 1), success)
mstore(0x38e0, mload(0x3c0))
                    mstore(0x3900, mload(0x3e0))
mstore(0x3920, mload(0x26c0))
success := and(eq(staticcall(gas(), 0x7, 0x38e0, 0x60, 0x38e0, 0x40), 1), success)
mstore(0x3940, mload(0x3860))
                    mstore(0x3960, mload(0x3880))
mstore(0x3980, mload(0x38e0))
                    mstore(0x39a0, mload(0x3900))
success := and(eq(staticcall(gas(), 0x6, 0x3940, 0x80, 0x3940, 0x40), 1), success)
mstore(0x39c0, mload(0x400))
                    mstore(0x39e0, mload(0x420))
mstore(0x3a00, mload(0x26e0))
success := and(eq(staticcall(gas(), 0x7, 0x39c0, 0x60, 0x39c0, 0x40), 1), success)
mstore(0x3a20, mload(0x3940))
                    mstore(0x3a40, mload(0x3960))
mstore(0x3a60, mload(0x39c0))
                    mstore(0x3a80, mload(0x39e0))
success := and(eq(staticcall(gas(), 0x6, 0x3a20, 0x80, 0x3a20, 0x40), 1), success)
mstore(0x3aa0, mload(0x320))
                    mstore(0x3ac0, mload(0x340))
mstore(0x3ae0, mload(0x2700))
success := and(eq(staticcall(gas(), 0x7, 0x3aa0, 0x60, 0x3aa0, 0x40), 1), success)
mstore(0x3b00, mload(0x3a20))
                    mstore(0x3b20, mload(0x3a40))
mstore(0x3b40, mload(0x3aa0))
                    mstore(0x3b60, mload(0x3ac0))
success := and(eq(staticcall(gas(), 0x6, 0x3b00, 0x80, 0x3b00, 0x40), 1), success)
mstore(0x3b80, mload(0x840))
                    mstore(0x3ba0, mload(0x860))
mstore(0x3bc0, mload(0x2c80))
success := and(eq(staticcall(gas(), 0x7, 0x3b80, 0x60, 0x3b80, 0x40), 1), success)
mstore(0x3be0, mload(0x3b00))
                    mstore(0x3c00, mload(0x3b20))
mstore(0x3c20, mload(0x3b80))
                    mstore(0x3c40, mload(0x3ba0))
success := and(eq(staticcall(gas(), 0x6, 0x3be0, 0x80, 0x3be0, 0x40), 1), success)
mstore(0x3c60, mload(0x880))
                    mstore(0x3c80, mload(0x8a0))
mstore(0x3ca0, mload(0x2cc0))
success := and(eq(staticcall(gas(), 0x7, 0x3c60, 0x60, 0x3c60, 0x40), 1), success)
mstore(0x3cc0, mload(0x3be0))
                    mstore(0x3ce0, mload(0x3c00))
mstore(0x3d00, mload(0x3c60))
                    mstore(0x3d20, mload(0x3c80))
success := and(eq(staticcall(gas(), 0x6, 0x3cc0, 0x80, 0x3cc0, 0x40), 1), success)
mstore(0x3d40, mload(0x8c0))
                    mstore(0x3d60, mload(0x8e0))
mstore(0x3d80, mload(0x2d00))
success := and(eq(staticcall(gas(), 0x7, 0x3d40, 0x60, 0x3d40, 0x40), 1), success)
mstore(0x3da0, mload(0x3cc0))
                    mstore(0x3dc0, mload(0x3ce0))
mstore(0x3de0, mload(0x3d40))
                    mstore(0x3e00, mload(0x3d60))
success := and(eq(staticcall(gas(), 0x6, 0x3da0, 0x80, 0x3da0, 0x40), 1), success)
mstore(0x3e20, mload(0x880))
                    mstore(0x3e40, mload(0x8a0))
mstore(0x3e60, mload(0x28a0))
success := and(eq(staticcall(gas(), 0x7, 0x3e20, 0x60, 0x3e20, 0x40), 1), success)
mstore(0x3e80, mload(0x840))
                    mstore(0x3ea0, mload(0x860))
mstore(0x3ec0, mload(0x3e20))
                    mstore(0x3ee0, mload(0x3e40))
success := and(eq(staticcall(gas(), 0x6, 0x3e80, 0x80, 0x3e80, 0x40), 1), success)
mstore(0x3f00, mload(0x8c0))
                    mstore(0x3f20, mload(0x8e0))
mstore(0x3f40, mload(0x2b40))
success := and(eq(staticcall(gas(), 0x7, 0x3f00, 0x60, 0x3f00, 0x40), 1), success)
mstore(0x3f60, mload(0x3e80))
                    mstore(0x3f80, mload(0x3ea0))
mstore(0x3fa0, mload(0x3f00))
                    mstore(0x3fc0, mload(0x3f20))
success := and(eq(staticcall(gas(), 0x6, 0x3f60, 0x80, 0x3f60, 0x40), 1), success)
mstore(0x3fe0, mload(0x3da0))
                    mstore(0x4000, mload(0x3dc0))
mstore(0x4020, 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2)
            mstore(0x4040, 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)
            mstore(0x4060, 0x090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b)
            mstore(0x4080, 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)
mstore(0x40a0, mload(0x3f60))
                    mstore(0x40c0, mload(0x3f80))
mstore(0x40e0, 0x161a05c064c2349ae0f1eb3b5d48c7294172320b361bd4d8dede57325f09b7c9)
            mstore(0x4100, 0x2bf0af5c241f18df5b4313cd6afe93df76e4fd86098ea94e0fadb7af4727abc5)
            mstore(0x4120, 0x1d84ad1fac8fb78a78e20175d96fbe74032d213418c4fcdb674128a5c7461c50)
            mstore(0x4140, 0x0d7b95a21a25493c6852d3fabdf5192594ad40f7c3f2201087678b525734709c)
success := and(eq(staticcall(gas(), 0x8, 0x3fe0, 0x180, 0x3fe0, 0x20), 1), success)
success := and(eq(mload(0x3fe0), 1), success)

            if not(success) { revert(0, 0) }
            return(0, 0)

                }
            }
        }